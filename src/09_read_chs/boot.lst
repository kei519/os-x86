     1                                  ; マクロ
     2                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD	equ	0x7C00			; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE	equ	(1024 * 8)		; ブートコードサイズ
     4                              <1> SECT_SIZE	equ	(512)			; セクタサイズ
     5                              <1> BOOT_SECT	equ	(BOOT_SIZE / SECT_SIZE)	; ブートプログラムのセクタ数
     3                                  %include	"../include/macro.s"
     1                              <1> ; Cの関数風に呼び出すマクロ
     2                              <1> %macro	cdecl 1-*.nolist
     3                              <1> 	%rep	%0 - 1
     4                              <1> 		push	%{-1:-1}
     5                              <1> 		%rotate	-1
     6                              <1> 	%endrep
     7                              <1> 	%rotate	-1
     8                              <1> 	call	%1
     9                              <1> 	%if 1 < %0
    10                              <1> 		add	sp, (__BITS__ >> 3) * (%0 - 1)
    11                              <1> 	%endif
    12                              <1> %endmacro
    13                              <1> 
    14                              <1> struc drive
    15 00000000 <res 00000002>      <1> 	.no	resw	1		; ドライブ番号
    16 00000002 <res 00000002>      <1> 	.cyln	resw	1		; シリンダ
    17 00000004 <res 00000002>      <1> 	.head	resw	1		; ヘッド
    18 00000006 <res 00000002>      <1> 	.sect	resw	1		; セクタ
    19                              <1> endstruc
     4                                  
     5                                  	ORG	BOOT_LOAD
     6                                  
     7                                  ; エントリポイント
     8                                  entry:
     9                                  	;BPM (Boot Parameter Block)
    10 00000000 EB58                    	jmp	ipl
    11 00000002 90<rept>                	times	90 - ($ - $$) db 0x90
    12                                  
    13                                  	;IPL (Initial Program Loader)
    14                                  ipl:
    15 0000005A FA                      	cli					; 割り込み禁止
    16                                  
    17 0000005B B80000                  	mov	ax, 0
    18 0000005E 8ED8                    	mov	ds, ax
    19 00000060 8EC0                    	mov	es, ax
    20 00000062 8ED0                    	mov	ss, ax
    21 00000064 BC007C                  	mov	sp, BOOT_LOAD
    22                                  
    23 00000067 FB                      	sti					; 割り込み許可
    24                                  
    25 00000068 8816[BA00]              	mov	[BOOT + drive.no], dl
    26                                  
    27                                  	; 文字列を表示
    28 0000006C 68[9900]E8500083C4-     	cdecl	puts, .s0
    28 00000074 02                 
    29                                  
    30                                  	; 残りのセクタをすべて読み込む
    31 00000075 BB0F00                  	mov	bx, BOOT_SECT - 1		; BX = 残りのブートセクタ数
    32 00000078 B9007E                  	mov	cx, BOOT_LOAD + SECT_SIZE	; CX = 次のロードアドレス
    33                                  
    34 0000007B 515368[BA00]E89D00-     	cdecl	read_chs, BOOT, bx, cx		; AX = read_chs(.chs, bx, cx)
    34 00000083 83C406             
    35                                  
    36 00000086 39D8                    	cmp	ax, bx				; AX != 残りのセクタ数 のとき
    37 00000088 740C                    .10Q:	jz	.10E
    38 0000008A 68[A600]E8320083C4-     .10T:	cdecl	puts, .e0
    38 00000092 02                 
    39 00000093 E84B00                  	call	reboot
    40                                  .10E:
    41                                  	; 次のステージへ移行
    42 00000096 E96701                  	jmp	stage_2				; ブート処理の第2ステージ
    43                                  
    44                                  	; データ
    45 00000099 426F6F74696E672E2E-     .s0	db	"Booting...", 0x0A, 0x0D, 0
    45 000000A2 2E0A0D00           
    46 000000A6 4572726F723A207365-     .e0	db	"Error: sector read", 0
    46 000000AF 63746F722072656164-
    46 000000B8 00                 
    47                                  
    48                                  ; ブートドライブに関する情報
    49 000000B9 00                      ALIGN 2, db 0
    50                                  BOOT:						; ブートドライブに関する情報
    51                                  	istruc	drive
    52 000000BA 0000                    	    at	drive.no,	dw 0		; ドライブ番号
    53 000000BC 0000                    	    at	drive.cyln,	dw 0		; C: シリンダ
    54 000000BE 0000                    	    at	drive.head,	dw 0		; H: ヘッド
    55 000000C0 0200                    	    at	drive.sect,	dw 2		; S: セクタ
    56                                  	iend
    57                                  
    58                                  ; モジュール
    59                                  %include	"../modules/real/puts.s"
     1                              <1> puts:	; void puts(str)
     2                              <1> 	; スタックフレームの構築
     3 000000C2 55                  <1> 	push	bp
     4 000000C3 89E5                <1> 	mov	bp, sp
     5                              <1> 
     6                              <1> 	; レジスタの保存
     7 000000C5 50                  <1> 	push	ax
     8 000000C6 53                  <1> 	push	bx
     9 000000C7 56                  <1> 	push	si
    10                              <1> 
    11                              <1> 	; 引数を取得
    12 000000C8 8B7604              <1> 	mov	si, [bp + 4]
    13                              <1> 
    14                              <1> 	; 処理の開始
    15 000000CB B40E                <1> 	mov	ah, 0x0E		; テレタイプ式1文字出力
    16 000000CD BB0000              <1> 	mov	bx, 0x0000		; ページ番号と文字色を0に設定
    17 000000D0 FC                  <1> 	cld				; DF(Direction Flag) = 0	ストリング命令で加算
    18                              <1> .10L:
    19 000000D1 AC                  <1> 	lodsb				; al = [si]; si++;
    20                              <1> 
    21 000000D2 3C00                <1> 	cmp	al, 0
    22 000000D4 7404                <1> 	je	.10E
    23                              <1> 
    24 000000D6 CD10                <1> 	int	0x10
    25 000000D8 EBF7                <1> 	jmp	.10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1> 	; レジスタの復帰
    29 000000DA 5E                  <1> 	pop	si
    30 000000DB 5B                  <1> 	pop	bx
    31 000000DC 58                  <1> 	pop	ax
    32                              <1> 
    33                              <1> 	; スタックフレームの破棄
    34 000000DD 89EC                <1> 	mov	sp, bp
    35 000000DF 5D                  <1> 	pop	bp
    36                              <1> 
    37 000000E0 C3                  <1> 	ret
    60                                  %include	"../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 	; メッセージを表示
     3 000000E1 68[FD00]E8DBFF83C4- <1> 	cdecl	puts, .s0
     3 000000E9 02                  <1>
     4                              <1> 
     5                              <1> 	; キー入力待ち
     6                              <1> .10L:
     7 000000EA B400                <1> 	mov	ah, 0
     8 000000EC CD16                <1> 	int	0x16		; キーボード読み取り
     9                              <1> 
    10 000000EE 3C20                <1> 	cmp	al, ' '		; AL = 読み取り結果のASCIIコード
    11 000000F0 75F8                <1> 	jne	.10L
    12                              <1> 	
    13                              <1> 	; 改行を出力
    14 000000F2 68[1B01]E8CAFF83C4- <1> 	cdecl	puts, .s1
    14 000000FA 02                  <1>
    15                              <1> 
    16                              <1> 	; 再起動
    17 000000FB CD19                <1> 	int	0x19
    18                              <1> 
    19                              <1> 	; 文字列データ
    20 000000FD 0A0D50757368205350- <1> .s0:	db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    20 00000106 414345206B65792074- <1>
    20 0000010F 6F207265626F6F742E- <1>
    20 00000118 2E2E00              <1>
    21 0000011B 0A0D0A0D00          <1> .s1:	db 0x0A, 0x0D, 0x0A, 0x0D, 0
    61                                  %include	"../modules/real/read_chs.s"
     1                              <1> read_chs:	; int read_chs(drive, sect, dst)
     2                              <1> 	; スタックフレームの構築
     3                              <1> 						;    + 8| コピー先
     4                              <1> 						;    + 6| セクタ数
     5                              <1> 						;    + 4| パラメータバッファ
     6                              <1> 						; ------+----------------
     7                              <1> 						;    + 2| IP（戻り番地）
     8 00000120 55                  <1> 	push	bp				;  BP+ 0| BP（元の値）
     9 00000121 89E5                <1> 	mov	bp, sp				; ------+----------------
    10 00000123 6A03                <1> 	push	3				;    - 2| リトライ回数
    11 00000125 6A00                <1> 	push	0				;    - 4| 読み込みセクタ数
    12                              <1> 
    13                              <1> 	; レジスタの保存
    14 00000127 53                  <1> 	push	bx
    15 00000128 51                  <1> 	push	cx
    16 00000129 52                  <1> 	push	dx
    17 0000012A 06                  <1> 	push	es
    18 0000012B 56                  <1> 	push	si
    19                              <1> 
    20                              <1> 	; 処理の開始
    21 0000012C 8B7604              <1> 	mov	si, [bp + 4]
    22                              <1> 
    23                              <1> 	; CXレジスタの設定
    24                              <1> 	; （BIOSコールの呼び出しに適した形に変換）
    25 0000012F 8A6C02              <1> 	mov	ch, [si + drive.cyln + 0]	; CH = シリンダ番号（下位バイト）
    26 00000132 8A4C03              <1> 	mov	cl, [si + drive.cyln + 1]	; CL = シリンダ番号（上位バイト）
    27 00000135 C0E106              <1> 	shl	cl, 6				; CL <<= 6; // 最上位2ビットにシフト
    28 00000138 0A4C06              <1> 	or	cl, [si + drive.sect]		; CL |= セクタ番号
    29                              <1> 
    30                              <1> 	; セクタ読み込み
    31 0000013B 8A7404              <1> 	mov	dh, [si + drive.head]		; DH = ヘッド番号
    32 0000013E 8A14                <1> 	mov	dl, [si + drive.no]		; DL = ドライブ番号
    33 00000140 B80000              <1> 	mov	ax, 0				; AX = 0x0000
    34 00000143 8EC0                <1> 	mov	es, ax				; es = セグメント
    35 00000145 8B5E08              <1> 	mov	bx, [bp + 8]
    36                              <1> .10L:
    37 00000148 B402                <1> 	mov	ah, 0x02			; AH = セクタ読み込み
    38 0000014A 8A4606              <1> 	mov	al, [bp + 6]			; AL = セクタ数
    39                              <1> 
    40 0000014D CD13                <1> 	int	0x13				; CF = BIOS(0x13, AH)
    41 0000014F 7304                <1> 	jnc	.11E
    42                              <1> 
    43 00000151 B000                <1> 	mov	al, 0
    44 00000153 EB0C                <1> 	jmp	.10E
    45                              <1> .11E:
    46 00000155 3C00                <1> 	cmp	al, 0
    47 00000157 7508                <1> 	jne	.10E
    48                              <1> 
    49 00000159 B80000              <1> 	mov	ax, 0
    50 0000015C FF4EFE              <1> 	dec	word [bp - 2]
    51 0000015F 75E7                <1> 	jnz	.10L
    52                              <1> .10E:
    53 00000161 B400                <1> 	mov	ah, 0
    54                              <1> 
    55                              <1> 	; レジスタの復帰
    56 00000163 5E                  <1> 	pop	si
    57 00000164 07                  <1> 	pop	es
    58 00000165 5A                  <1> 	pop	dx
    59 00000166 59                  <1> 	pop	cx
    60 00000167 5B                  <1> 	pop	bx
    61                              <1> 
    62                              <1> 	; スタックフレームの破棄
    63 00000168 89EC                <1> 	mov	sp, bp
    64 0000016A 5D                  <1> 	pop	bp
    65                              <1> 
    66 0000016B C3                  <1> 	ret
    62                                  
    63                                  ; ブートフラグ
    64 0000016C 00<rept>                	times (SECT_SIZE - 2) - ($ - $$) db 0x00
    65 000001FE 55AA                    	db 0x55, 0xAA
    66                                  
    67                                  ; ブート処理の第2ステージ
    68                                  stage_2:
    69                                  	; 文字列表示
    70 00000200 68[0B02]E8BCFE83C4-     	cdecl	puts, .s0
    70 00000208 02                 
    71                                  
    72                                  	; 処理の終了
    73 00000209 EBFE                    	jmp	$				; 無限ループ
    74                                  
    75                                  	; データ
    76 0000020B 326E64207374616765-     .s0	db "2nd stage...", 0x0A, 0x0D, 0
    76 00000214 2E2E2E0A0D00       
    77                                  
    78                                  ; パディング（このファイルは8Kバイトとする）
    79 0000021A 00<rept>                	times BOOT_SIZE - ($ - $$)	db 0	; パディング
