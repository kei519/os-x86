     1                                  ; マクロ
     2                                  %include	"../include/define.s"
     1                              <1> BOOT_LOAD	equ	0x7C00			; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE	equ	(1024 * 8)		; ブートコードサイズ
     4                              <1> SECT_SIZE	equ	(512)			; セクタサイズ
     5                              <1> BOOT_SECT	equ	(BOOT_SIZE / SECT_SIZE)	; ブートプログラムのセクタ数
     3                                  %include	"../include/macro.s"
     1                              <1> ; Cの関数風に呼び出すマクロ
     2                              <1> %macro	cdecl 1-*.nolist
     3                              <1> 	%rep	%0 - 1
     4                              <1> 		push	%{-1:-1}
     5                              <1> 		%rotate	-1
     6                              <1> 	%endrep
     7                              <1> 	%rotate	-1
     8                              <1> 	call	%1
     9                              <1> 	%if 1 < %0
    10                              <1> 		add	sp, (__BITS__ >> 3) * (%0 - 1)
    11                              <1> 	%endif
    12                              <1> %endmacro
    13                              <1> 
    14                              <1> struc drive
    15 00000000 <res 00000002>      <1> 	.no	resw	1		; ドライブ番号
    16 00000002 <res 00000002>      <1> 	.cyln	resw	1		; シリンダ
    17 00000004 <res 00000002>      <1> 	.head	resw	1		; ヘッド
    18 00000006 <res 00000002>      <1> 	.sect	resw	1		; セクタ
    19                              <1> endstruc
     4                                  
     5                                  	ORG	BOOT_LOAD
     6                                  
     7                                  ; エントリポイント
     8                                  entry:
     9                                  	;BPM (Boot Parameter Block)
    10 00000000 EB58                    	jmp	ipl
    11 00000002 90<rept>                	times	90 - ($ - $$) db 0x90
    12                                  
    13                                  	;IPL (Initial Program Loader)
    14                                  ipl:
    15 0000005A FA                      	cli					; 割り込み禁止
    16                                  
    17 0000005B B80000                  	mov	ax, 0
    18 0000005E 8ED8                    	mov	ds, ax
    19 00000060 8EC0                    	mov	es, ax
    20 00000062 8ED0                    	mov	ss, ax
    21 00000064 BC007C                  	mov	sp, BOOT_LOAD
    22                                  
    23 00000067 FB                      	sti					; 割り込み許可
    24                                  
    25 00000068 8816[BA00]              	mov	[BOOT + drive.no], dl
    26                                  
    27                                  	; 文字列を表示
    28 0000006C 68[9900]E8500083C4-     	cdecl	puts, .s0
    28 00000074 02                 
    29                                  
    30                                  	; 残りのセクタをすべて読み込む
    31 00000075 BB0F00                  	mov	bx, BOOT_SECT - 1		; BX = 残りのブートセクタ数
    32 00000078 B9007E                  	mov	cx, BOOT_LOAD + SECT_SIZE	; CX = 次のロードアドレス
    33                                  
    34 0000007B 515368[BA00]E89D00-     	cdecl	read_chs, BOOT, bx, cx		; AX = read_chs(.chs, bx, cx)
    34 00000083 83C406             
    35                                  
    36 00000086 39D8                    	cmp	ax, bx				; AX != 残りのセクタ数 のとき
    37 00000088 740C                    .10Q:	jz	.10E
    38 0000008A 68[A600]E8320083C4-     .10T:	cdecl	puts, .e0
    38 00000092 02                 
    39 00000093 E84B00                  	call	reboot
    40                                  .10E:
    41                                  	; 次のステージへ移行
    42 00000096 E95102                  	jmp	stage_2				; ブート処理の第2ステージ
    43                                  
    44                                  	; データ
    45 00000099 426F6F74696E672E2E-     .s0	db	"Booting...", 0x0A, 0x0D, 0
    45 000000A2 2E0A0D00           
    46 000000A6 4572726F723A207365-     .e0	db	"Error: sector read", 0
    46 000000AF 63746F722072656164-
    46 000000B8 00                 
    47                                  
    48                                  ; ブートドライブに関する情報
    49 000000B9 00                      ALIGN 2, db 0
    50                                  BOOT:						; ブートドライブに関する情報
    51                                  	istruc	drive
    52 000000BA 0000                    	    at	drive.no,	dw 0		; ドライブ番号
    53 000000BC 0000                    	    at	drive.cyln,	dw 0		; C: シリンダ
    54 000000BE 0000                    	    at	drive.head,	dw 0		; H: ヘッド
    55 000000C0 0200                    	    at	drive.sect,	dw 2		; S: セクタ
    56                                  	iend
    57                                  
    58                                  ; モジュール
    59                                  %include	"../modules/real/puts.s"
     1                              <1> puts:	; void puts(str)
     2                              <1> 	; スタックフレームの構築
     3 000000C2 55                  <1> 	push	bp
     4 000000C3 89E5                <1> 	mov	bp, sp
     5                              <1> 
     6                              <1> 	; レジスタの保存
     7 000000C5 50                  <1> 	push	ax
     8 000000C6 53                  <1> 	push	bx
     9 000000C7 56                  <1> 	push	si
    10                              <1> 
    11                              <1> 	; 引数を取得
    12 000000C8 8B7604              <1> 	mov	si, [bp + 4]
    13                              <1> 
    14                              <1> 	; 処理の開始
    15 000000CB B40E                <1> 	mov	ah, 0x0E		; テレタイプ式1文字出力
    16 000000CD BB0000              <1> 	mov	bx, 0x0000		; ページ番号と文字色を0に設定
    17 000000D0 FC                  <1> 	cld				; DF(Direction Flag) = 0	ストリング命令で加算
    18                              <1> .10L:
    19 000000D1 AC                  <1> 	lodsb				; al = [si]; si++;
    20                              <1> 
    21 000000D2 3C00                <1> 	cmp	al, 0
    22 000000D4 7404                <1> 	je	.10E
    23                              <1> 
    24 000000D6 CD10                <1> 	int	0x10
    25 000000D8 EBF7                <1> 	jmp	.10L
    26                              <1> .10E:
    27                              <1> 
    28                              <1> 	; レジスタの復帰
    29 000000DA 5E                  <1> 	pop	si
    30 000000DB 5B                  <1> 	pop	bx
    31 000000DC 58                  <1> 	pop	ax
    32                              <1> 
    33                              <1> 	; スタックフレームの破棄
    34 000000DD 89EC                <1> 	mov	sp, bp
    35 000000DF 5D                  <1> 	pop	bp
    36                              <1> 
    37 000000E0 C3                  <1> 	ret
    60                                  %include	"../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 	; メッセージを表示
     3 000000E1 68[FD00]E8DBFF83C4- <1> 	cdecl	puts, .s0
     3 000000E9 02                  <1>
     4                              <1> 
     5                              <1> 	; キー入力待ち
     6                              <1> .10L:
     7 000000EA B400                <1> 	mov	ah, 0
     8 000000EC CD16                <1> 	int	0x16		; キーボード読み取り
     9                              <1> 
    10 000000EE 3C20                <1> 	cmp	al, ' '		; AL = 読み取り結果のASCIIコード
    11 000000F0 75F8                <1> 	jne	.10L
    12                              <1> 	
    13                              <1> 	; 改行を出力
    14 000000F2 68[1B01]E8CAFF83C4- <1> 	cdecl	puts, .s1
    14 000000FA 02                  <1>
    15                              <1> 
    16                              <1> 	; 再起動
    17 000000FB CD19                <1> 	int	0x19
    18                              <1> 
    19                              <1> 	; 文字列データ
    20 000000FD 0A0D50757368205350- <1> .s0:	db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    20 00000106 414345206B65792074- <1>
    20 0000010F 6F207265626F6F742E- <1>
    20 00000118 2E2E00              <1>
    21 0000011B 0A0D0A0D00          <1> .s1:	db 0x0A, 0x0D, 0x0A, 0x0D, 0
    61                                  %include	"../modules/real/read_chs.s"
     1                              <1> read_chs:	; int read_chs(drive, sect, dst)
     2                              <1> 	; スタックフレームの構築
     3                              <1> 						;    + 8| コピー先
     4                              <1> 						;    + 6| セクタ数
     5                              <1> 						;    + 4| パラメータバッファ
     6                              <1> 						; ------+----------------
     7                              <1> 						;    + 2| IP（戻り番地）
     8 00000120 55                  <1> 	push	bp				;  BP+ 0| BP（元の値）
     9 00000121 89E5                <1> 	mov	bp, sp				; ------+----------------
    10 00000123 6A03                <1> 	push	3				;    - 2| リトライ回数
    11 00000125 6A00                <1> 	push	0				;    - 4| 読み込みセクタ数
    12                              <1> 
    13                              <1> 	; レジスタの保存
    14 00000127 53                  <1> 	push	bx
    15 00000128 51                  <1> 	push	cx
    16 00000129 52                  <1> 	push	dx
    17 0000012A 06                  <1> 	push	es
    18 0000012B 56                  <1> 	push	si
    19                              <1> 
    20                              <1> 	; 処理の開始
    21 0000012C 8B7604              <1> 	mov	si, [bp + 4]
    22                              <1> 
    23                              <1> 	; CXレジスタの設定
    24                              <1> 	; （BIOSコールの呼び出しに適した形に変換）
    25 0000012F 8A6C02              <1> 	mov	ch, [si + drive.cyln + 0]	; CH = シリンダ番号（下位バイト）
    26 00000132 8A4C03              <1> 	mov	cl, [si + drive.cyln + 1]	; CL = シリンダ番号（上位バイト）
    27 00000135 C0E106              <1> 	shl	cl, 6				; CL <<= 6; // 最上位2ビットにシフト
    28 00000138 0A4C06              <1> 	or	cl, [si + drive.sect]		; CL |= セクタ番号
    29                              <1> 
    30                              <1> 	; セクタ読み込み
    31 0000013B 8A7404              <1> 	mov	dh, [si + drive.head]		; DH = ヘッド番号
    32 0000013E 8A14                <1> 	mov	dl, [si + drive.no]		; DL = ドライブ番号
    33 00000140 B80000              <1> 	mov	ax, 0				; AX = 0x0000
    34 00000143 8EC0                <1> 	mov	es, ax				; es = セグメント
    35 00000145 8B5E08              <1> 	mov	bx, [bp + 8]
    36                              <1> .10L:
    37 00000148 B402                <1> 	mov	ah, 0x02			; AH = セクタ読み込み
    38 0000014A 8A4606              <1> 	mov	al, [bp + 6]			; AL = セクタ数
    39                              <1> 
    40 0000014D CD13                <1> 	int	0x13				; CF = BIOS(0x13, AH)
    41 0000014F 7304                <1> 	jnc	.11E
    42                              <1> 
    43 00000151 B000                <1> 	mov	al, 0
    44 00000153 EB0C                <1> 	jmp	.10E
    45                              <1> .11E:
    46 00000155 3C00                <1> 	cmp	al, 0
    47 00000157 7508                <1> 	jne	.10E
    48                              <1> 
    49 00000159 B80000              <1> 	mov	ax, 0
    50 0000015C FF4EFE              <1> 	dec	word [bp - 2]
    51 0000015F 75E7                <1> 	jnz	.10L
    52                              <1> .10E:
    53 00000161 B400                <1> 	mov	ah, 0
    54                              <1> 
    55                              <1> 	; レジスタの復帰
    56 00000163 5E                  <1> 	pop	si
    57 00000164 07                  <1> 	pop	es
    58 00000165 5A                  <1> 	pop	dx
    59 00000166 59                  <1> 	pop	cx
    60 00000167 5B                  <1> 	pop	bx
    61                              <1> 
    62                              <1> 	; スタックフレームの破棄
    63 00000168 89EC                <1> 	mov	sp, bp
    64 0000016A 5D                  <1> 	pop	bp
    65                              <1> 
    66 0000016B C3                  <1> 	ret
    62                                  
    63                                  ; ブートフラグ
    64 0000016C 00<rept>                	times (SECT_SIZE - 2) - ($ - $$) db 0x00
    65 000001FE 55AA                    	db 0x55, 0xAA
    66                                  
    67                                  ; リアルモード時に取得した情報
    68                                  FONT:						; フォント
    69 00000200 0000                    .seg:	dw 0
    70 00000202 0000                    .off:	dw 0
    71                                  
    72                                  ; モジュール（先頭512バイト以降に配置）
    73                                  %include "../modules/real/itoa.s"
     1                              <1> itoa:	; void itoa(num, buff, size, radix, flags)
     2                              <1> 	; スタックフレームの構築
     3 00000204 55                  <1> 	push	bp
     4 00000205 89E5                <1> 	mov	bp, sp
     5                              <1> 
     6                              <1> 	; レジスタの保存
     7 00000207 50                  <1> 	push	ax
     8 00000208 53                  <1> 	push	bx
     9 00000209 51                  <1> 	push	cx
    10 0000020A 52                  <1> 	push	dx
    11 0000020B 56                  <1> 	push	si
    12 0000020C 57                  <1> 	push	di
    13                              <1> 
    14                              <1> 	; 引数を取得
    15 0000020D 8B4604              <1> 	mov	ax, [bp + 4]		; AX = num
    16 00000210 8B7606              <1> 	mov	si, [bp + 6]		; SI = buff
    17 00000213 8B4E08              <1> 	mov	cx, [bp + 8]		; CX = size
    18                              <1> 
    19 00000216 89F7                <1> 	mov	di, si			; バッファの最後尾
    20 00000218 01CF                <1> 	add	di, cx			; DI = buff + size - 1
    21 0000021A 4F                  <1> 	dec	di
    22                              <1> 
    23 0000021B 8B5E0C              <1> 	mov	bx, word [bp + 12]	; BX = flags
    24                              <1> 
    25                              <1> 	; 符号付き判定
    26 0000021E F7C30100            <1> 	test	bx, 0b0001
    27 00000222 7408                <1> .10Q:	jz	.10E
    28 00000224 83F800              <1> 	cmp	ax, 0
    29 00000227 7D03                <1> .12Q:	jge	.12E
    30 00000229 83CB02              <1> 	or	bx, 0b0010
    31                              <1> .12E:
    32                              <1> .10E:
    33                              <1> 
    34                              <1> 	; 符号出力判定
    35 0000022C F7C30200            <1> 	test	bx, 0b0010
    36 00000230 7412                <1> .20Q:	jz	.20E
    37 00000232 83F800              <1> 	cmp	ax, 0
    38 00000235 7D08                <1> .22Q:	jge	.22F
    39 00000237 F7D8                <1> 	neg	ax
    40 00000239 C7042D00            <1> 	mov	[si], word '-'
    41 0000023D EB04                <1> 	jmp	.22E
    42                              <1> .22F:
    43 0000023F C7042B00            <1> 	mov	[si], word '+'
    44                              <1> .22E:
    45 00000243 49                  <1> 	dec	cx
    46                              <1> .20E:
    47                              <1> 
    48                              <1> 	; ASCII変換
    49 00000244 8B5E0A              <1> 	mov	bx, [bp + 10]		; BX = radix
    50                              <1> .30L:
    51 00000247 BA0000              <1> 	mov	dx, 0
    52 0000024A F7F3                <1> 	div	bx
    53                              <1> 
    54 0000024C 89D6                <1> 	mov	si, dx
    55 0000024E 8A94[7802]          <1> 	mov	dl, byte [.ascii + si]
    56                              <1> 
    57 00000252 8815                <1> 	mov	[di], dl
    58 00000254 4F                  <1> 	dec	di
    59                              <1> 
    60 00000255 83F800              <1> 	cmp	ax, 0
    61 00000258 E0ED                <1> 	loopnz	.30L
    62                              <1> .30E:
    63                              <1> 
    64                              <1> 	; 空欄を埋める
    65 0000025A 83F900              <1> 	cmp	cx, 0
    66 0000025D 740F                <1> .40Q:	je	.40E
    67 0000025F F6460C04            <1> 	test	[bp + 12], byte 0b0100
    68 00000263 7404                <1> 	jz	.42Q
    69 00000265 B030                <1> 	mov	al, byte '0'
    70 00000267 EB02                <1> 	jmp	.42E
    71 00000269 B020                <1> .42Q:	mov	al, byte ' '
    72                              <1> .42E:
    73 0000026B FD                  <1> 	std
    74 0000026C F3AA                <1> 	rep stosb
    75                              <1> .40E:
    76                              <1> 
    77                              <1> 	; レジスタの復帰
    78 0000026E 5F                  <1> 	pop	di
    79 0000026F 5E                  <1> 	pop	si
    80 00000270 5A                  <1> 	pop	dx
    81 00000271 59                  <1> 	pop	cx
    82 00000272 5B                  <1> 	pop	bx
    83 00000273 58                  <1> 	pop	ax
    84                              <1> 
    85                              <1> 	; スタックフレームの破棄
    86 00000274 89EC                <1> 	mov	sp, bp
    87 00000276 5D                  <1> 	pop	bp
    88                              <1> 
    89 00000277 C3                  <1> 	ret
    90                              <1> 
    91 00000278 303132333435363738- <1> .ascii	db	"0123456789ABCDEF", 0	; 変換テーブル
    91 00000281 3941424344454600    <1>
    74                                  %include "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:	; bool get_drive_param(drive)
     2                              <1> 	; スタックフレームの構築
     3 00000289 55                  <1> 	push	bp
     4 0000028A 89E5                <1> 	mov	bp, sp
     5                              <1> 
     6                              <1> 	; レジスタの保存
     7 0000028C 53                  <1> 	push	bx
     8 0000028D 51                  <1> 	push	cx
     9 0000028E 06                  <1> 	push	es
    10 0000028F 56                  <1> 	push	si
    11 00000290 57                  <1> 	push	di
    12                              <1> 
    13                              <1> 	; 処理の開始
    14 00000291 8B7604              <1> 	mov	si, [bp + 4]
    15                              <1> 
    16 00000294 B80000              <1> 	mov	ax, 0
    17 00000297 8EC0                <1> 	mov	es, ax
    18 00000299 89C7                <1> 	mov	di, ax
    19                              <1> 
    20 0000029B B408                <1> 	mov	ah, 8			; AH = 0x8
    21 0000029D 8A14                <1> 	mov	dl, [si + drive.no]
    22 0000029F CD13                <1> 	int	0x13			; BIOS(0x13, dl)
    23 000002A1 721B                <1> .10Q:	jc	.10F
    24                              <1> .10T:
    25 000002A3 88C8                <1> 	mov	al, cl
    26 000002A5 83E03F              <1> 	and	ax, 0x3F		; 下位6ビット （AX = セクタ数）
    27                              <1> 
    28 000002A8 C0E906              <1> 	shr	cl, 6
    29 000002AB C1C908              <1> 	ror	cx, 8
    30 000002AE 41                  <1> 	inc	cx			; CX = シリンダ数
    31                              <1> 
    32 000002AF 0FB6DE              <1> 	movzx	bx, dh
    33 000002B2 43                  <1> 	inc	bx			; BX = ヘッド数
    34                              <1> 
    35 000002B3 894C02              <1> 	mov	[si + drive.cyln], cx
    36 000002B6 895C04              <1> 	mov	[si + drive.head], bx
    37 000002B9 894406              <1> 	mov	[si + drive.sect], ax
    38                              <1> 
    39 000002BC EB03                <1> 	jmp	.10E
    40                              <1> .10F:
    41 000002BE B80000              <1> 	mov	ax, 0
    42                              <1> .10E:
    43                              <1> 
    44                              <1> 	; レジスタの復帰
    45 000002C1 5F                  <1> 	pop	di
    46 000002C2 5E                  <1> 	pop	si
    47 000002C3 07                  <1> 	pop	es
    48 000002C4 59                  <1> 	pop	cx
    49 000002C5 5B                  <1> 	pop	bx
    50                              <1> 
    51                              <1> 	; スタックフレームの破棄
    52 000002C6 89EC                <1> 	mov	sp, bp
    53 000002C8 5D                  <1> 	pop	bp
    54                              <1> 
    55 000002C9 C3                  <1> 	ret
    75                                  %include "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:	; void get_font_adr(adr)
     2                              <1> 	; スタックフレームの構築
     3 000002CA 55                  <1> 	push	bp
     4 000002CB 89E5                <1> 	mov	bp, sp
     5                              <1> 
     6                              <1> 	; レジスタの保存
     7 000002CD 50                  <1> 	push	ax
     8 000002CE 53                  <1> 	push	bx
     9 000002CF 56                  <1> 	push	si
    10 000002D0 06                  <1> 	push	es
    11 000002D1 55                  <1> 	push	bp
    12                              <1> 
    13                              <1> 	; 引数を取得
    14 000002D2 8B7604              <1> 	mov	si, [bp + 4]
    15                              <1> 
    16                              <1> 	; フォントアドレスの取得
    17 000002D5 B83011              <1> 	mov	ax, 0x1130		; フォントアドレスの取得
    18 000002D8 B706                <1> 	mov	bh, 0x06		; 8x16 font
    19 000002DA CD10                <1> 	int	0x10			; ES:BX = FONT ADDRESS
    20                              <1> 
    21                              <1> 	; フォントアドレスを保存
    22 000002DC 8C04                <1> 	mov	[si + 0], es		; adr[0] = セグメント
    23 000002DE 895C02              <1> 	mov	[si + 2], bx		; adr[1] = オフセット
    24                              <1> 
    25                              <1> 	; レジスタの復帰
    26 000002E1 5D                  <1> 	pop	bp
    27 000002E2 07                  <1> 	pop	es
    28 000002E3 5E                  <1> 	pop	si
    29 000002E4 5B                  <1> 	pop	bx
    30 000002E5 58                  <1> 	pop	ax
    31                              <1> 
    32                              <1> 	; スタックフレームの破棄
    33 000002E6 89EC                <1> 	mov	sp, bp
    34 000002E8 5D                  <1> 	pop	bp
    35                              <1> 
    36 000002E9 C3                  <1> 	ret
    76                                  
    77                                  ; ブート処理の第2ステージ
    78                                  stage_2:
    79                                  	; ドライブ情報を取得
    80 000002EA 68[BA00]E899FF83C4-     	cdecl	get_drive_param, BOOT
    80 000002F2 02                 
    81 000002F3 83F800                  	cmp	ax, 0
    82 000002F6 750C                    .10Q:	jne	.10E
    83 000002F8 68[9203]E8C4FD83C4-     .10T:	cdecl	puts, .e0
    83 00000300 02                 
    84 00000301 E8DDFD                  	call	reboot
    85                                  .10E:
    86                                  	; ドライブ情報を表示
    87 00000304 A1[BA00]                	mov	ax, [BOOT + drive.no]		; AX = ブートドライブ
    88 00000307 6A046A106A0268-         	cdecl	itoa, ax, .p1, 2, 16, 0b0100
    88 0000030E [7303]50E8F0FE83C4-
    88 00000316 0A                 
    89 00000317 A1[BC00]                	mov	ax, [BOOT + drive.cyln]
    90 0000031A 6A046A106A0468-         	cdecl	itoa, ax, .p2, 4, 16, 0b0100
    90 00000321 [7B03]50E8DDFE83C4-
    90 00000329 0A                 
    91 0000032A A1[BE00]                	mov	ax, [BOOT + drive.head]
    92 0000032D 6A046A106A0268-         	cdecl	itoa, ax, .p3, 2, 16, 0b0100
    92 00000334 [8503]50E8CAFE83C4-
    92 0000033C 0A                 
    93 0000033D A1[C000]                	mov	ax, [BOOT + drive.sect]
    94 00000340 6A046A106A0268-         	cdecl	itoa, ax, .p4, 2, 16, 0b0100
    94 00000347 [8D03]50E8B7FE83C4-
    94 0000034F 0A                 
    95 00000350 68[6A03]E86CFD83C4-     	cdecl	puts, .s1
    95 00000358 02                 
    96                                  
    97                                  	; 次のステージへ移行
    98 00000359 EB52                    	jmp	stage_3rd			; 無限ループ
    99                                  
   100                                  	; データ
   101 0000035B 326E64207374616765-     .s0	db "2nd stage...", 0x0A, 0x0D, 0
   101 00000364 2E2E2E0A0D00       
   102                                  
   103 0000036A 2044726976653A3078      .s1	db " Drive:0x"
   104 00000373 20202C20433A3078        .p1	db "  , C:0x"
   105 0000037B 202020202C20483A30-     .p2	db "    , H:0x"
   105 00000384 78                 
   106 00000385 20202C20533A3078        .p3	db "  , S:0x"
   107 0000038D 20200A0D00              .p4	db "  ", 0x0A, 0x0D, 0
   108                                  
   109 00000392 43616E277420676574-     .e0	db "Can't get drive parameter.", 0
   109 0000039B 206472697665207061-
   109 000003A4 72616D657465722E00 
   110                                  
   111                                  stage_3rd:
   112                                  	; 文字列を表示
   113 000003AD 68[F003]E80FFD83C4-     	cdecl	puts, .s0
   113 000003B5 02                 
   114                                  
   115                                  	; プロテクトモードで使用するフォントは、
   116                                  	; BIOSに内蔵されたものを流用する
   117 000003B6 68[0002]E80EFF83C4-     	cdecl	get_font_adr, FONT
   117 000003BE 02                 
   118                                  
   119                                  	; フォントアドレスの表示
   120 000003BF 6A046A106A0468-         	cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   120 000003C6 [0D04]FF36[0002]E8-
   120 000003CD 35FE83C40A         
   121 000003D2 6A046A106A0468-         	cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   121 000003D9 [1204]FF36[0202]E8-
   121 000003E0 22FE83C40A         
   122 000003E5 68[FF03]E8D7FC83C4-     	cdecl	puts, .s1
   122 000003ED 02                 
   123                                  
   124                                  	; 処理の終了
   125 000003EE EBFE                    	jmp	$
   126                                  
   127                                  	; データ
   128 000003F0 337264207374616765-     .s0	db "3rd stage...", 0x0A, 0x0D, 0
   128 000003F9 2E2E2E0A0D00       
   129                                  
   130 000003FF 20466F6E7420416464-     .s1	db " Font Address="
   130 00000408 726573733D         
   131 0000040D 5A5A5A5A3A              .p1	db "ZZZZ:"
   132 00000412 5A5A5A5A0A0D00          .p2	db "ZZZZ", 0x0A, 0x0D, 0
   133 00000419 0A0D00                  	db 0x0A, 0x0D, 0
   134                                  
   135                                  ; パディング（このファイルは8Kバイトとする）
   136 0000041C 00<rept>                	times BOOT_SIZE - ($ - $$)	db 0	; パディング
